//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Game {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class OptionEnglishString {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal OptionEnglishString() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Game.OptionEnglishString", typeof(OptionEnglishString).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ablative Coat absorbs the next 3 Damage your robot recieves. Put those Damage tokens onto this card instead of onto your Program Sheet. Discard this card when you put the third one on..
        /// </summary>
        internal static string AblativeCoat {
            get {
                return ResourceManager.GetString("AblativeCoat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once each turn, you may replace one of the Program cards you reveal with the top card from the deck. If you do, you must replace the Program cards for all your remaining registers the same way that turn..
        /// </summary>
        internal static string AbortSwitch {
            get {
                return ResourceManager.GetString("AbortSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever you execute a move 1, you may move your robot 0 spaces instead of 1. Priority is that of the Move 1..
        /// </summary>
        internal static string Brakes {
            get {
                return ResourceManager.GetString("Brakes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you have 3 or more Damage tokens on your Program Sheet at the end of your turn, your robot will begin the next turn powered down. .
        /// </summary>
        internal static string CircutBreaker {
            get {
                return ResourceManager.GetString("CircutBreaker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to After you program your registers each turn, you may put one of the Program cards left in your hand face down onto this Option instead of discarding it. Later that turn, you can substitute that card for one you had programmed into any register, discarding the original card. Announce the change before anyone reveals Program cards for that register. If you put a card on this Option and don&apos;t use it, discard it at the end of the turn..
        /// </summary>
        internal static string ConditionalProgramming {
            get {
                return ResourceManager.GetString("ConditionalProgramming", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When programming your registers, you may put a Move 1 card in the same register as a Rotate Left or Rotate Right card. If you do, during that register your robot will move 1 space to the left or right, respectively, without rotating. Priority is that of the Move 1..
        /// </summary>
        internal static string CrabLegs {
            get {
                return ResourceManager.GetString("CrabLegs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever your robot files it&apos;s main laser, fires two shots instead of one. You may use this Option with Fire Control and/or High Powered Laser..
        /// </summary>
        internal static string DoubleBarreledLaser {
            get {
                return ResourceManager.GetString("DoubleBarreledLaser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When programming your registers, you may put both a Move card (Move 1, Move 2, Move 3, or Back Up) and a Rotate card (Rotate Left, Rotate Right, or U-Turn) in the same register. If you do, during that phase your robot will move 1 space less than the Move card says to move and then execute the Rotate card. If the Rotate card is a U-Turn, move 2 spaces less than the Move card says if possible..
        /// </summary>
        internal static string DualProcessor {
            get {
                return ResourceManager.GetString("DualProcessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You receive one extra Program card each turn. (You still discard all unused Program cards when you&apos;re done progamming your registers.).
        /// </summary>
        internal static string ExtraMemory {
            get {
                return ResourceManager.GetString("ExtraMemory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever your robot hits another robot with its main laser, instead of doing damage you may choose one of the target robot&apos;s registers and lock it or choose one of that player&apos;s Options and destroy it. (The player can&apos;t discard an Option to avoid this effect.).
        /// </summary>
        internal static string FireControl {
            get {
                return ResourceManager.GetString("FireControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to After all players are done programming their registers each turn, you may put one card of your remaining Programming cards face down onto this card. You can add that Programming card to those dealt to you on any subsequent turn. You can have only one card on Flywheel at a time..
        /// </summary>
        internal static string Flywheel {
            get {
                return ResourceManager.GetString("Flywheel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever you execute a Move 3, you may move your robot 4 spaces instead of 3. Priority is that of the Move 3..
        /// </summary>
        internal static string FourthGear {
            get {
                return ResourceManager.GetString("FourthGear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Before players reveal the cards in their first registers each turn, state whether this Option is active. When it is, your robot isn&apos;t rotated by gears or rotating conveyor belts for that entire turn..
        /// </summary>
        internal static string GyroscopicStablizer {
            get {
                return ResourceManager.GetString("GyroscopicStablizer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your robot&apos;s main laser can shoot through one wall or robot to get to a target robot. If you shoot through a robot, that robot also receives full damage. You may combine this Option with Fire Control and/or Double-Barreled Laser..
        /// </summary>
        internal static string HighPoweredLaser {
            get {
                return ResourceManager.GetString("HighPoweredLaser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your robot can touch a flag or repair site from 1 space away (diagonally or othogonally), as long as there isn&apos;t a wall between it and the flag or repair site..
        /// </summary>
        internal static string MechanicalArm {
            get {
                return ResourceManager.GetString("MechanicalArm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever you could fire your main laser at a robot, you may fire the Mini Howitzer instead. This pushes the target robot 1 space away from your robot, and the target robot receives 1 Damage token. (Robots can&apos;t be pushed through walls.) You may use this Option five times. Put a Damage token on this card each time you use it and discard this card and the tokens when you put the fifth one on..
        /// </summary>
        internal static string MiniHowitzer {
            get {
                return ResourceManager.GetString("MiniHowitzer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to As long as your robot is powered down, each register ohase you can prevent up to 1 Damage to it from each of the four directions..
        /// </summary>
        internal static string PowerDownShield {
            get {
                return ResourceManager.GetString("PowerDownShield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever you could fire your main laser at a robot, you may instead fire the Pressor Beam. This moves the target robot 1 space away from your robot..
        /// </summary>
        internal static string PressorBeam {
            get {
                return ResourceManager.GetString("PressorBeam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever you could fire your main laser at a robot, you may instead fire the Radio Control beam. This causes the target robot to execute your robot&apos;s program for the rest of the turn. In the cases of card priority, the target robot moves immediately after your robot..
        /// </summary>
        internal static string RadioControl {
            get {
                return ResourceManager.GetString("RadioControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever your robot pushes or bumps into another robot, that robot receives 1 Damage token..
        /// </summary>
        internal static string RammingGear {
            get {
                return ResourceManager.GetString("RammingGear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your robot has a rear-firing laser inaddition to its main laser. This laser follows all the same rules as the main laser..
        /// </summary>
        internal static string RearFiringLaser {
            get {
                return ResourceManager.GetString("RearFiringLaser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once each turn, you may discrd the hand of Programming cards dealt to you and draw a new hand from the deck. Your robot then receives 1 Damage token..
        /// </summary>
        internal static string Recompile {
            get {
                return ResourceManager.GetString("Recompile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever you execute a Back Up, you maymove your robot back 2 spaces instead of 1. Priority is that of the Back Up..
        /// </summary>
        internal static string ReverseGear {
            get {
                return ResourceManager.GetString("ReverseGear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever you could fire your main laser at a robot, you may instead fire the Scrambler. This replaces the target robot&apos;s next programmed card with the top Program card from the deck. You can&apos;t use this Option on the fifth register phase..
        /// </summary>
        internal static string Scrambler {
            get {
                return ResourceManager.GetString("Scrambler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When reentering play after being destroyed, your robot doesn&apos;t receive the normal 2 Damage tokens..
        /// </summary>
        internal static string SuperiorArchive {
            get {
                return ResourceManager.GetString("SuperiorArchive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whenever you could fire your main laser at a robot that isn&apos;t in an adjacent space, you may instead fire the Tractor Beam. This pulls the target robot 1 space toward your robot..
        /// </summary>
        internal static string TractorBeam {
            get {
                return ResourceManager.GetString("TractorBeam", resourceCulture);
            }
        }
    }
}
